
# The OS module in Python provides a way of using operating system dependent functionality.

# OS
# The functions that the OS module provides allows you to interface with the underlying operating system that Python is running on â€“ be that Windows, Mac or Linux.
# I think we are using this for log file management
import os
#
# https://docs.python.org/2/library/sys.html
#
import sys
#
# This module provides mechanisms to use signal handlers in Python
# https://docs.python.org/2/library/signal.html
#
import signal
#
# Python debugger
#
import pdb

#we now use IB API which is installed in Python
# This client class contains all the available methods to communicate with IB

from ibapi.client import EClient

#This interface's methods are used by the TWS/Gateway to communicate with the API client.'
#Every API client application needs to implement this interface in order to handle all the events generated by the TWS/Gateway.

from wrapper import AppWrapper
#
# import the local config file i
import config

#https://docs.python.org/2/library/multiprocessing.html
import multiprocessing

#https://docs.python.org/2.6/library/logging.html
import logging


########## CLASSES ##########
class AppClient(EClient):
    def __init__(self, wrapper):
        EClient.__init__(self, wrapper)

class Second30Trader(AppWrapper, AppClient):
    def __init__(self):
        AppWrapper.__init__(self)
        AppClient.__init__(self, wrapper=self)
        signal.signal(signal.SIGINT, self.interruptHandler)

    def interruptHandler(self, signum, frame):
        console = logging.getLogger(name="console")
        console.info("Disconnecting From API...")
        self.disconnect()
        sys.exit(0)


########## FUNCTIONS ##########
def setup_logger():
    if os.path.exists(config.LOGFILE):
        os.remove(config.LOGFILE)

    logformat = "%(asctime)s - (%(levelname)s) in %(funcName)s::%(lineno)d [%(threadName)s]: %(message)s"

    filelogger = logging.getLogger()
    logging.basicConfig(
        filename=config.LOGFILE,
        level=logging.INFO,
        format=logformat)

    console = logging.getLogger(name="console")
    console_handler = logging.StreamHandler(stream=sys.stdout)
    console_handler.setFormatter(logging.Formatter(logformat))
    console.addHandler(console_handler)

    return console

########## MAIN ##########
def main():
    console = setup_logger()
    console.info("Started Second30 Trader v{}".format(config.VERSION))

    app = Second30Trader()

    try:
        console.info("Connecting to TWS API at {}:{}. Client ID: {}".format(config.HOST, config.PORT, config.CLIENTID))
        app.connect(config.HOST, config.PORT, clientId=config.CLIENTID)
        if app.isConnected():
            console.info("Connection Successful.  Server Version: {}".format(app.serverVersion()))
            app.run()
        else:
            console.info("Connection Failed")
    except:
        raise

if __name__ == "__main__":
    main()